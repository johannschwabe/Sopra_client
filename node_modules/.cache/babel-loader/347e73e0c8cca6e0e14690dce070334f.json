{"ast":null,"code":"import { isProduction } from \"./isProduction\";\n/**\n * This helper function return the current domain of the API. If is production, the Production Heroku URL will returned.\n * Otherwise, the link localhost:8080 will be returned (Spring server default port)\n * @returns {string}\n */\n\nexport var getDomain = function getDomain() {\n  var prodUrl = \"https://sopra-fs19-admingroup-server.herokuapp.com\"; // TODO: insert your groups heroku prod url for server (once deployed)\n\n  var devUrl = \"http://localhost:8080\";\n\n  if (isProduction()) {\n    return prodUrl;\n  }\n\n  return devUrl;\n};","map":{"version":3,"sources":["/Users/Johann/Desktop/UZH/4. Semester/SoPra/code/client/src/helpers/getDomain.js"],"names":["isProduction","getDomain","prodUrl","devUrl"],"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AAEA;;;;;;AAKA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC7B,MAAMC,OAAO,GAAG,oDAAhB,CAD6B,CACyC;;AACtE,MAAMC,MAAM,GAAG,uBAAf;;AACA,MAAIH,YAAY,EAAhB,EAAoB;AAClB,WAAOE,OAAP;AACD;;AACD,SAAOC,MAAP;AACD,CAPM","sourcesContent":["import { isProduction } from \"./isProduction\";\n\n/**\n * This helper function return the current domain of the API. If is production, the Production Heroku URL will returned.\n * Otherwise, the link localhost:8080 will be returned (Spring server default port)\n * @returns {string}\n */\nexport const getDomain = () => {\n  const prodUrl = \"https://sopra-fs19-admingroup-server.herokuapp.com\"; // TODO: insert your groups heroku prod url for server (once deployed)\n  const devUrl = \"http://localhost:8080\";\n  if (isProduction()) {\n    return prodUrl;\n  }\n  return devUrl;\n};\n"]},"metadata":{},"sourceType":"module"}